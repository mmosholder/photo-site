// //
// // Button Classes
// // --------------------------------------------------

// // Reset Button
// // -------------------------
// // In an article on CSS-Tricks
// // (http://css-tricks.com/use-button-element/),
// // Chris Coyier explains that:
// // "if a button doesn’t have a meaningful
// // href, it’s a <button>"; which makes sense.
// //
// // This placeholder resets <button>'s
// // default styling, so we can use
// // <button>s where it makes without
// // worrying about the styling.

// @mixin button-reset {
//   cursor: pointer;
//   padding: 0;
//   background-color: transparent;
//   // Reset unusual Firefox-on-Android default style;
//   // https://github.com/necolas/normalize.css/issues/214
//   background-image: none;
//   border: 1px solid transparent;

//   &:active {
//     outline: 0;
//   }
// }

// // Button Style Mixin
// // -------------------------
// // generates every style needed for a new button
// // when passed the apropriate colors
// //
// // $fill-color     - background color for the button
// // $text-color     - button text color
// // $secondary-text-color       - text color used with secondary modifier class (defaults to fill color)
// // $secondary-hover-text-color - background color used with secondary modifier class (defaults to text color)

// @mixin button-style(
//   $fill-color,
//   $text-color,
//   $secondary-text-color: $fill-color,
//   $secondary-hover-text-color: $text-color
// ) {
//   //button state colors
//   $hover-background-color: darken($fill-color, 15%);
//   $active-background-color: darken($fill-color, 15%);
//   $secondary-active-background-color: darken($fill-color, 15%);

//   //base style
//   background-color: $fill-color;
//   color: $text-color;
//   border-color: $secondary-text-color;
//   border: 1px solid transparent;
//   transition: background-color 240ms $t-1;

//   &:hover,
//   &:focus {
//     background-color: $hover-background-color;
//     transition: background-color 300ms $t-1;
//   }

//   &:active { background-color: $active-background-color; }
// }

// .button {
//   @include button-reset;
//   border-radius: 0;
//   text-decoration: none;
//   cursor: pointer;
//   display: inline-block;
//   border: 1px solid transparent;
//   text-align: center;
//   width: 100%;
//   display: block;

//   @include mq($from: $breakpoint-small) {
//     width: auto;
//     display: inline-block;
//   }
// }

// .button-arrow {
//   @include button-style($fill-white, $text-blue-light);
//   position: relative;
//   padding: pxem(30) 0;

//   @include mq($from: $breakpoint-small) {
//     padding: pxem(30) pxem(100) pxem(30) pxem(80);
//   }

//   @include mq($from: $breakpoint-medium) {
//     padding: pxem(40) pxem(100) pxem(40) pxem(80);
//   }

//   svg {
//     width: pxem(29);
//     right: pxem(60);
//     position: absolute;
//     top: 42%;
//     display: none;
//     transition: right 241ms $t-1;

//     @include mq($from: $breakpoint-small) {
//       display: inline;
//     }

//     path {fill: $fill-blue-light;}
//   }

//   &:hover,
//   &:focus {
//     background-color: $fill-white-hover;
//     color: darken($text-blue-light, 10%);

//     svg {
//       right: pxem(55);

//       path {fill: darken($fill-blue-light, 15%);}
//     }
//   }
// }

// .button-pink {
//   @include button-style($fill-pink, $text-white);
//   position: relative;
//   padding: pxem(30) 0;

//   @include mq($from: $breakpoint-small) {
//     padding: pxem(30) pxem(60);
//   }

//   @include mq($from: $breakpoint-medium) {
//     padding: pxem(40) pxem(80);
//   }

//   &:hover,
//   &:focus {
//     background-color: #C5445B;
//   }
// }

// .button-submit {
//   @include button-style($fill-pink, $text-white);
//   position: relative;
//   padding: pxem(25) pxem(60);

//   &:hover,
//   &:focus {
//     background-color: #C5445B;
//   }
// }
